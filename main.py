import customtkinter as ctk
import tkinter as tk
import random
import re
from datetime import datetime

# –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
responses = {
    "–ø—Ä–∏–≤—ñ—Ç": "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏?",
    "—è–∫ —Å–ø—Ä–∞–≤–∏": "–£ –º–µ–Ω–µ –≤—Å–µ —á—É–¥–æ–≤–æ, –¥—è–∫—É—é! üòä –ê —É —Ç–µ–±–µ?",
    "—â–æ —Ä–æ–±–∏—à": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üòé",
    "–±—É–≤–∞–π": "–ë—É–≤–∞–π! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
    "–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è": "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –ë—É–ª–æ –ø—Ä–∏—î–º–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è üëã",
    "–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ": "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –ì–∞—Ä–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã",

    "—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏": "–Ø —á–∞—Ç-–±–æ—Ç ü§ñ",
    "—Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤": "–Ø —â–µ –º–æ–ª–æ–¥–∏–π, –≤—Å—å–æ–≥–æ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É üòÅ",
    "–¥–µ —Ç–∏ –∂–∏–≤–µ—à": "–Ø –∂–∏–≤—É –ø—Ä—è–º–æ —Ç—É—Ç, —É —Ç–≤–æ—î–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ üíª",
    "—â–æ —Ç–∏ –≤–º—ñ—î—à": "–Ø –≤–º—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É üó£Ô∏è",
    "—Ç–∏ –ª—é–¥–∏–Ω–∞": "–ù—ñ, —è –±–æ—Ç, –∞–ª–µ –º–æ–∂—É —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –º–∞–π–∂–µ —è–∫ –ª—é–¥–∏–Ω–∞ üòâ",
    "—è–∫–∞ –ø–æ–≥–æ–¥–∞": "–ü–æ–≥–æ–¥–∞ —É –º–µ–Ω–µ –∑–∞–≤–∂–¥–∏ —è—Å–Ω–∞ ‚Äî —è –∂ —É –∫–æ–¥—ñ ‚òÄÔ∏è",
    "—â–æ —ó—Å–∏": "–ï–ª–µ–∫—Ç—Ä–∏–∫—É ‚ö° —Ç–∞ —Ç—Ä–æ—Ö–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–º'—è—Ç—ñ üòÖ",
    "—Ç–∏ —Å–ø–∏—à": "–ù—ñ, —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É üîã",
    "—è–∫ –Ω–∞—Å—Ç—Ä—ñ–π": "–ß—É–¥–æ–≤–∏–π! –î—è–∫—É—é, —â–æ –∑–∞–ø–∏—Ç–∞–≤ üòÉ –ê —É —Ç–µ–±–µ?",
    "–ª—é–±–∏—à –º—É–∑–∏–∫—É": "–ó–≤–∏—á–∞–π–Ω–æ! –û—Å–æ–±–ª–∏–≤–æ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É üé∂",
    "—è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å": "–°—å–æ–≥–æ–¥–Ω—ñ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å, —â–æ–± –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑—ñ –º–Ω–æ—é üòâ",

    # –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–º–ø'—é—Ç–µ—Ä
    "—â–æ —Ç–∞–∫–µ –∫–æ–º–ø'—é—Ç–µ—Ä": "–ö–æ–º–ø'—é—Ç–µ—Ä ‚Äî —Ü–µ —Ä–æ–∑—É–º–Ω–∞ –º–∞—à–∏–Ω–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó üíª",
    "—Ö—Ç–æ –ø—Ä–∏–¥—É–º–∞–≤ –∫–æ–º–ø'—é—Ç–µ—Ä": "–ü–µ—Ä—à—ñ —ñ–¥–µ—ó –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ –ß–∞—Ä–ª—å–∑ –ë–µ–±–±—ñ–¥–∂ —É 19 —Å—Ç–æ–ª—ñ—Ç—Ç—ñ üë®‚Äçüî¨",
    "–Ω–∞–≤—ñ—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–æ–º–ø'—é—Ç–µ—Ä": "–ö–æ–º–ø'—é—Ç–µ—Ä –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏, —ñ–≥–æ—Ä, —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ —ñ–Ω—à–æ–≥–æ üåç",
    "—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä": "–Ø –ø—Ä–æ–≥—Ä–∞–º–∞, —è–∫–∞ –ø—Ä–∞—Ü—é—î –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ ‚ö°",

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    "–¥—è–∫—É—é": "–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ üòä",
    "—Å–ø–∞—Å–∏–±—ñ": "–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ üòä",
    "–¥–æ–ø–æ–º–æ–∂–∏": "–ó–≤–∏—á–∞–π–Ω–æ –¥–æ–ø–æ–º–æ–∂—É! –©–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å? ü§ù",
    "–Ω—É–¥–Ω–æ": "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ! üí≠",
    "—â–æ –Ω–æ–≤–æ–≥–æ": "–ó–∞–≤–∂–¥–∏ —î —â–æ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏! –†–æ–∑–∫–∞–∂–∏, —â–æ —É —Ç–µ–±–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è? üì∞",
    "—è–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω–µ –≤—Å–µ —Å—É–ø–µ—Ä! –ê —É —Ç–µ–±–µ —è–∫? üòä"
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
suggestions = [
    # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ
    ["–ü—Ä–∏–≤—ñ—Ç", "–Ø–∫ —Å–ø—Ä–∞–≤–∏", "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏"],
    ["–©–æ —Ä–æ–±–∏—à", "–Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π", "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤"],

    # –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –±–æ—Ç–∞
    ["–¢–∏ –ª—é–¥–∏–Ω–∞", "–©–æ —Ç–∏ –≤–º—ñ—î—à", "–î–µ —Ç–∏ –∂–∏–≤–µ—à"],
    ["–¢–∏ —Å–ø–∏—à", "–©–æ —ó—Å–∏", "–õ—é–±–∏—à –º—É–∑–∏–∫—É"],

    # –ö–æ–º–ø'—é—Ç–µ—Ä–∏ —Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
    ["–©–æ —Ç–∞–∫–µ –∫–æ–º–ø'—é—Ç–µ—Ä", "–•—Ç–æ –ø—Ä–∏–¥—É–º–∞–≤ –∫–æ–º–ø'—é—Ç–µ—Ä", "–¢–∏ –∫–æ–º–ø'—é—Ç–µ—Ä"],

    # –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    ["–Ø–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å", "–Ø–∫–∞ –ø–æ–≥–æ–¥–∞", "–ß–∞—Å"],
    ["–î—è–∫—É—é", "–î–æ–ø–æ–º–æ–∂–∏", "–ù—É–¥–Ω–æ"],

    # –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–ø—Ä–∏–∫–ª–∞–¥–∏)
    ["–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ê–Ω–Ω–∞", "–ú–µ–Ω—ñ 20 —Ä–æ–∫—ñ–≤", "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"],

    # –ü—Ä–æ—â–∞–Ω–Ω—è
    ["–ë—É–≤–∞–π", "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ"]
]

# –®–∞–±–ª–æ–Ω–∏ –¥–ª—è –±—ñ–ª—å—à –≥–Ω—É—á–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
patterns = [
    (r"–º–µ–Ω–µ –∑–≤–∞—Ç–∏ (\w+)", "–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è, {}! üòä"),
    (r"–º–µ–Ω—ñ (\d+) —Ä–æ–∫—ñ–≤", "–ó–¥–æ—Ä–æ–≤–æ! {} —Ä–æ–∫—ñ–≤ - —á—É–¥–æ–≤–∏–π –≤—ñ–∫! üéâ"),
    (r"—è –ª—é–±–ª—é (\w+)", "–ö—Ä—É—Ç–æ! {} - —Ü–µ —á—É–¥–æ–≤–æ! ‚ù§Ô∏è"),
    (r"—á–∞—Å|—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É", f"–ó–∞—Ä–∞–∑ {datetime.now().strftime('%H:%M')} ‚è∞"),
]

# –¢–µ–º–∏ –¥–ª—è —á–∞—Ç–∞
THEMES = {
    "light": {
        "bg_main": "#FAFAFA",
        "bg_chat": "white",
        "bg_header": "#2AABEE",
        "bg_input": "#F5F5F5",
        "bg_suggestions": "white",
        "bg_suggestions_header": "#E3F2FD",
        "text_header": "white",
        "text_suggestions_header": "#1976D2",
        "user_message": "#0084FF",
        "bot_message": "#F0F0F0",
        "user_text": "white",
        "bot_text": "black",
        "border_color": "#E0E0E0"
    },
    "dark": {
        "bg_main": "#1A1A1A",
        "bg_chat": "#2D2D2D",
        "bg_header": "#1E3A8A",
        "bg_input": "#404040",
        "bg_suggestions": "#2D2D2D",
        "bg_suggestions_header": "#374151",
        "text_header": "white",
        "text_suggestions_header": "#60A5FA",
        "user_message": "#3B82F6",
        "bot_message": "#4B5563",
        "user_text": "white",
        "bot_text": "white",
        "border_color": "#4B5563"
    }
}


class TelegramMessage(ctk.CTkFrame):
    def __init__(self, parent, sender, text, timestamp, is_user=False, theme="light"):
        super().__init__(parent, fg_color="transparent")

        self.is_user = is_user
        self.theme = theme
        current_theme = THEMES[theme]

        message_frame = ctk.CTkFrame(
            self,
            fg_color=current_theme["user_message"] if is_user else current_theme["bot_message"],
            corner_radius=18
        )

        if is_user:
            message_frame.pack(fill="x", padx=(50, 10), pady=2, anchor="e")
        else:
            message_frame.pack(fill="x", padx=(10, 50), pady=2, anchor="w")

        message_label = ctk.CTkLabel(
            message_frame,
            text=text,
            font=ctk.CTkFont(size=14),
            text_color=current_theme["user_text"] if is_user else current_theme["bot_text"],
            wraplength=300,
            justify="left"
        )
        message_label.pack(padx=12, pady=8, anchor="w")

        info_text = f"{sender} ‚Ä¢ {timestamp}"
        info_label = ctk.CTkLabel(
            message_frame,
            text=info_text,
            font=ctk.CTkFont(size=10),
            text_color=current_theme["user_text"] if is_user else "gray",
        )
        info_label.pack(padx=12, pady=(0, 8), anchor="e" if is_user else "w")


class ChatBotApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.current_theme = "light"

        self.title("Telegram Style ChatBot - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è")
        self.geometry("900x700")
        self.minsize(600, 500)

        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        self.create_interface()
        self.message_widgets = []
        self.suggestion_buttons = []
        self.update_suggestions()

        self.add_message("–ß–∞—Ç-–ë–æ—Ç", "–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! üòä", False)

    def create_interface(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –ø–æ—Ç–æ—á–Ω–æ—é —Ç–µ–º–æ—é"""
        theme = THEMES[self.current_theme]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.header_frame = ctk.CTkFrame(self, height=60, fg_color=theme["bg_header"], corner_radius=0)
        self.header_frame.pack(fill="x", padx=0, pady=0)
        self.header_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.settings_button = ctk.CTkButton(
            self.header_frame,
            text="‚öôÔ∏è",
            width=40,
            height=40,
            font=ctk.CTkFont(size=16),
            fg_color="transparent",
            hover_color="#1E88E5",
            text_color="white",
            command=self.toggle_settings
        )
        self.settings_button.pack(side="right", padx=15, pady=10)

        self.avatar_frame = ctk.CTkFrame(self.header_frame, width=40, height=40, fg_color="#1E88E5", corner_radius=20)
        self.avatar_frame.pack(side="left", padx=15, pady=10)
        self.avatar_frame.pack_propagate(False)

        avatar_label = ctk.CTkLabel(
            self.avatar_frame,
            text="ü§ñ",
            font=ctk.CTkFont(size=20)
        )
        avatar_label.place(relx=0.5, rely=0.5, anchor="center")

        info_frame = ctk.CTkFrame(self.header_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="both", expand=True, padx=(5, 0), pady=10)

        self.bot_name = ctk.CTkLabel(
            info_frame,
            text="–ß–∞—Ç-–ë–æ—Ç",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=theme["text_header"]
        )
        self.bot_name.pack(anchor="w")

        self.bot_status = ctk.CTkLabel(
            info_frame,
            text="–≤ –º–µ—Ä–µ–∂—ñ",
            font=ctk.CTkFont(size=12),
            text_color=theme["text_header"]
        )
        self.bot_status.pack(anchor="w")

        # –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞)
        self.settings_panel = ctk.CTkFrame(self, height=80, fg_color=theme["bg_suggestions_header"])
        self.settings_visible = False

        settings_label = ctk.CTkLabel(
            self.settings_panel,
            text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=theme["text_suggestions_header"]
        )
        settings_label.pack(side="left", padx=20, pady=25)

        self.theme_var = tk.StringVar(value=self.current_theme)

        light_radio = ctk.CTkRadioButton(
            self.settings_panel,
            text="‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞",
            variable=self.theme_var,
            value="light",
            font=ctk.CTkFont(size=12),
            text_color=theme["text_suggestions_header"],
            command=self.change_theme
        )
        light_radio.pack(side="left", padx=10, pady=25)

        dark_radio = ctk.CTkRadioButton(
            self.settings_panel,
            text="üåô –¢–µ–º–Ω–∞",
            variable=self.theme_var,
            value="dark",
            font=ctk.CTkFont(size=12),
            text_color=theme["text_suggestions_header"],
            command=self.change_theme
        )
        dark_radio.pack(side="left", padx=10, pady=25)

        self.main_frame = ctk.CTkFrame(self, fg_color=theme["bg_main"])
        self.main_frame.pack(fill="both", expand=True)

        self.chat_frame = ctk.CTkFrame(self.main_frame, fg_color=theme["bg_chat"])
        self.chat_frame.pack(side="left", fill="both", expand=True, padx=(0, 1))

        self.messages_frame = ctk.CTkScrollableFrame(
            self.chat_frame,
            fg_color=theme["bg_chat"]
        )
        self.messages_frame.pack(fill="both", expand=True, padx=0, pady=0)

        self.suggestions_frame = ctk.CTkFrame(self.main_frame, width=250, fg_color=theme["bg_suggestions"])
        self.suggestions_frame.pack(side="right", fill="y")
        self.suggestions_frame.pack_propagate(False)

        suggestions_header = ctk.CTkFrame(self.suggestions_frame, height=50, fg_color=theme["bg_suggestions_header"],
                                          corner_radius=0)
        suggestions_header.pack(fill="x")
        suggestions_header.pack_propagate(False)

        self.suggestions_label = ctk.CTkLabel(
            suggestions_header,
            text="üí¨ –®–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=theme["text_suggestions_header"]
        )
        self.suggestions_label.pack(pady=15)

        self.suggestions_scroll = ctk.CTkScrollableFrame(
            self.suggestions_frame,
            fg_color=theme["bg_suggestions"]
        )
        self.suggestions_scroll.pack(fill="both", expand=True, padx=10, pady=10)

        self.input_frame = ctk.CTkFrame(self.chat_frame, height=70, fg_color=theme["bg_input"], corner_radius=0)
        self.input_frame.pack(fill="x", side="bottom")
        self.input_frame.pack_propagate(False)

        input_container = ctk.CTkFrame(self.input_frame, fg_color="transparent")
        input_container.pack(fill="both", expand=True, padx=10, pady=10)

        self.entry = ctk.CTkEntry(
            input_container,
            placeholder_text="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...",
            height=40,
            font=ctk.CTkFont(size=14),
            corner_radius=20,
            border_width=1,
            border_color=theme["border_color"]
        )
        self.entry.pack(side="left", fill="x", expand=True, padx=(10, 5))
        self.entry.bind("<Return>", self.send_message)

        self.send_button = ctk.CTkButton(
            input_container,
            text="‚û§",
            width=40,
            height=40,
            font=ctk.CTkFont(size=16),
            corner_radius=20,
            fg_color="#2AABEE",
            hover_color="#1E88E5",
            command=self.send_message
        )
        self.send_button.pack(side="right", padx=(5, 0))

    def toggle_settings(self):
        """–ü–æ–∫–∞–∑—É—î/–ø—Ä–∏—Ö–æ–≤—É—î –ø–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if self.settings_visible:
            self.settings_panel.pack_forget()
            self.settings_visible = False
        else:
            self.settings_panel.pack(fill="x", after=self.header_frame)
            self.settings_visible = True

    def change_theme(self):
        """–ó–º—ñ–Ω—é—î —Ç–µ–º—É —á–∞—Ç–∞"""
        new_theme = self.theme_var.get()
        if new_theme != self.current_theme:
            self.current_theme = new_theme
            ctk.set_appearance_mode("dark" if new_theme == "dark" else "light")
            self.refresh_interface()

    def refresh_interface(self):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –Ω–æ–≤–æ—é —Ç–µ–º–æ—é"""
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        messages_data = []
        for widget in self.message_widgets:
            # –¢—É—Ç –º–∏ –± –∑–±–µ—Ä–µ–≥–ª–∏ –¥–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏–º–æ
            pass

        # –û—á–∏—â—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∂–µ—Ç–∏
        for widget in self.winfo_children():
            widget.destroy()

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        self.message_widgets = []
        self.suggestion_buttons = []
        self.update_suggestions()

        # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.add_message("–ß–∞—Ç-–ë–æ—Ç", "–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! üòä", False)

    def update_suggestions(self):
        """–û–Ω–æ–≤–ª—é—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Å—Ç–∏–ª—ñ Telegram"""
        theme = THEMES[self.current_theme]

        for button in self.suggestion_buttons:
            button.destroy()
        self.suggestion_buttons = []

        selected_groups = random.sample(suggestions, min(4, len(suggestions)))
        current_suggestions = []

        for group in selected_groups:
            current_suggestions.extend(group)

        random.shuffle(current_suggestions)
        display_suggestions = current_suggestions[:12]

        for suggestion in display_suggestions:
            btn = ctk.CTkButton(
                self.suggestions_scroll,
                text=suggestion,
                height=35,
                font=ctk.CTkFont(size=12),
                corner_radius=18,
                fg_color="#E3F2FD" if self.current_theme == "light" else "#374151",
                hover_color="#BBDEFB" if self.current_theme == "light" else "#4B5563",
                text_color="#1976D2" if self.current_theme == "light" else "#60A5FA",
                border_width=1,
                border_color="#2196F3" if self.current_theme == "light" else "#6B7280",
                command=lambda s=suggestion: self.use_suggestion(s)
            )
            btn.pack(fill="x", pady=3)
            self.suggestion_buttons.append(btn)

        separator = ctk.CTkFrame(self.suggestions_scroll, height=1, fg_color=theme["border_color"])
        separator.pack(fill="x", pady=10)

        refresh_btn = ctk.CTkButton(
            self.suggestions_scroll,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó",
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            corner_radius=20,
            fg_color="#4CAF50",
            hover_color="#45A049",
            command=self.update_suggestions
        )
        refresh_btn.pack(fill="x", pady=5)
        self.suggestion_buttons.append(refresh_btn)

    def use_suggestion(self, suggestion):
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é"""
        self.entry.delete(0, tk.END)
        self.entry.insert(0, suggestion)
        self.send_message()

    def find_pattern_response(self, message):
        """–®—É–∫–∞—î –∑–±—ñ–≥–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏"""
        for pattern, response_template in patterns:
            match = re.search(pattern, message.lower())
            if match:
                if '{}' in response_template:
                    return response_template.format(match.group(1))
                else:
                    return response_template
        return None

    def get_fuzzy_match(self, message):
        """–ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        words = message.lower().split()
        for word in words:
            for key in responses.keys():
                if word in key or key in word:
                    return responses[key]
        return None

    def send_message(self, event=None):
        user_msg = self.entry.get().strip()
        if not user_msg:
            return

        self.entry.delete(0, tk.END)

        self.add_message("–í–∏", user_msg, True)

        bot_msg = None

        bot_msg = responses.get(user_msg.lower())

        if not bot_msg:
            bot_msg = self.find_pattern_response(user_msg)

        if not bot_msg:
            bot_msg = self.get_fuzzy_match(user_msg)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if not bot_msg:
            default_responses = [
                "–¶—ñ–∫–∞–≤–æ! –†–æ–∑–∫–∞–∂–∏ –±—ñ–ª—å—à–µ ü§î",
                "–Ø –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞—é, —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ üòÖ",
                "–•–º, —Ü–µ –Ω–æ–≤–µ –¥–ª—è –º–µ–Ω–µ üßê",
                "–ú–æ–∂–µ—à –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏? ü§ñ",
                "–ù–µ –∑–æ–≤—Å—ñ–º —Ä–æ–∑—É–º—ñ—é, —Å–ø—Ä–æ–±—É–π —ñ–Ω–∞–∫—à–µ ü§∑‚Äç‚ôÇÔ∏è"
            ]
            bot_msg = random.choice(default_responses)

        self.after(500, lambda: self.add_message("–ß–∞—Ç-–ë–æ—Ç", bot_msg, False))

        if random.randint(1, 5) == 1:
            self.update_suggestions()

    def add_message(self, sender, text, is_user=False):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–∏–ª—ñ Telegram"""
        timestamp = datetime.now().strftime("%H:%M")

        message_widget = TelegramMessage(
            self.messages_frame,
            sender,
            text,
            timestamp,
            is_user,
            self.current_theme
        )
        message_widget.pack(fill="x", pady=2)
        self.message_widgets.append(message_widget)

        self.after(100, lambda: self.messages_frame._parent_canvas.yview_moveto(1.0))


if __name__ == "__main__":
    app = ChatBotApp()
    app.mainloop()