import customtkinter as ctk
import tkinter as tk
from tkinter import PhotoImage
import re
from datetime import datetime
import random

# –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
responses = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
    "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä –ê —É —Ç–µ–±—è?",
    "—á—Ç–æ –¥–µ–ª–∞–µ—à—å": "–û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üòé",
    "–ø–æ–∫–∞": "–ü–æ–∫–∞! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
    "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è üëã",

    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç": "–Ø —á–∞—Ç-–±–æ—Ç üëÅÔ∏è",
    "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–Ø –µ—â—ë –º–æ–ª–æ–¥–æ–π, –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–µ–∫ –∫–æ–¥–∞ üòÅ",
    "–≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å": "–Ø –∂–∏–≤—É –ø—Ä—è–º–æ —Ç—É—Ç, –≤ —Ç–≤–æ—ë–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ üíª",
    "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": "–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É üó£Ô∏è",
    "—Ç—ã —á–µ–ª–æ–≤–µ–∫": "–ù–µ—Ç, —è –±–æ—Ç, –Ω–æ –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è –ø–æ—á—Ç–∏ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ üòâ",
    "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞": "–ü–æ–≥–æ–¥–∞ —É –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ —è—Å–Ω–∞—è ‚Äî —è –≤–µ–¥—å –≤ –∫–æ–¥–µ ‚òÄÔ∏è",
    "—á—Ç–æ –∫—É—à–∞–µ—à—å": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ ‚ö° –∏ –Ω–µ–º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ üòÖ",
    "—Ç—ã —Å–ø–∏—à—å": "–ù–µ—Ç, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ üîã",
    "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": "–û—Ç–ª–∏—á–Ω–æ–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª üòÉ –ê —É —Ç–µ–±—è?",
    "–ª—é–±–∏—à—å –º—É–∑—ã–∫—É": "–ö–æ–Ω–µ—á–Ω–æ! –û—Å–æ–±–µ–Ω–Ω–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é üé∂",
    "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å": "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üòâ",

    # –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫–æ–º–ø—å—é—Ç–µ—Ä
    "—á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä": "–ö–æ–º–ø—å—é—Ç–µ—Ä ‚Äî —ç—Ç–æ —É–º–Ω–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üíª",
    "–∫—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä": "–ü–µ—Ä–≤—ã–µ –∏–¥–µ–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ß–∞—Ä–ª—å–∑ –ë—ç–±–±–∏–¥–∂ –≤ 19 –≤–µ–∫–µ üë®‚Äçüî¨",
    "–¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä": "–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã, –∏–≥—Ä, –æ–±—â–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ üåç",
    "—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä": "–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ ‚ö°",

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å üòä",
    "–ø–æ–º–æ–≥–∏": "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§ù",
    "—Å–∫—É—á–Ω–æ": "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º! üí≠",
    "—á—Ç–æ –Ω–æ–≤–æ–≥–æ": "–í—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ –æ–±—Å—É–¥–∏—Ç—å! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? üì∞"
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
suggestions = [
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞", "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç"],
    ["–ß—Ç–æ –¥–µ–ª–∞–µ—à—å", "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç"],

    # –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ
    ["–¢—ã —á–µ–ª–æ–≤–µ–∫", "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å"],
    ["–¢—ã —Å–ø–∏—à—å", "–ß—Ç–æ –∫—É—à–∞–µ—à—å", "–õ—é–±–∏—à—å –º—É–∑—ã–∫—É"],

    # –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    ["–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä", "–ö—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä", "–¢—ã –∫–æ–º–ø—å—é—Ç–µ—Ä"],

    # –û–±—â–µ–Ω–∏–µ
    ["–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å", "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞", "–í—Ä–µ–º—è"],
    ["–°–ø–∞—Å–∏–±–æ", "–ü–æ–º–æ–≥–∏", "–°–∫—É—á–Ω–æ"],

    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—Ä–∏–º–µ—Ä—ã)
    ["–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞", "–ú–Ω–µ 20 –ª–µ—Ç", "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],

    # –ü—Ä–æ—â–∞–Ω–∏–µ
    ["–ü–æ–∫–∞", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"]
]

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
patterns = [
    (r"–º–µ–Ω—è –∑–æ–≤—É—Ç (\w+)", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}! üòä"),
    (r"–º–Ω–µ (\d+) –ª–µ—Ç", "–ó–¥–æ—Ä–æ–≤–æ! {} –ª–µ—Ç - –æ—Ç–ª–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! üéâ"),
    (r"—è –ª—é–±–ª—é (\w+)", "–ö—Ä—É—Ç–æ! {} - —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚ù§Ô∏è"),
    (r"–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')} ‚è∞"),
]


class TelegramMessage(ctk.CTkFrame):
    def __init__(self, parent, sender, text, timestamp, is_user=False):
        super().__init__(parent, fg_color="transparent")

        self.is_user = is_user

        message_frame = ctk.CTkFrame(
            self,
            fg_color="#0084FF" if is_user else "#F0F0F0",
            corner_radius=18
        )

        if is_user:
            message_frame.pack(fill="x", padx=(50, 10), pady=2, anchor="e")
        else:
            message_frame.pack(fill="x", padx=(10, 50), pady=2, anchor="w")

        message_label = ctk.CTkLabel(
            message_frame,
            text=text,
            font=ctk.CTkFont(size=14),
            text_color="white" if is_user else "black",
            wraplength=300,
            justify="left"
        )
        message_label.pack(padx=12, pady=8, anchor="w")

        info_text = f"{sender} ‚Ä¢ {timestamp}"
        info_label = ctk.CTkLabel(
            message_frame,
            text=info_text,
            font=ctk.CTkFont(size=10),
            text_color="white" if is_user else "gray",
        )
        info_label.pack(padx=12, pady=(0, 8), anchor="e" if is_user else "w")


class ChatBotApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("Telegram Style ChatBot")
        self.geometry("900x700")
        self.minsize(600, 500)

        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        self.header_frame = ctk.CTkFrame(self, height=60, fg_color="#2AABEE", corner_radius=0)
        self.header_frame.pack(fill="x", padx=0, pady=0)
        self.header_frame.pack_propagate(False)

        self.avatar_frame = ctk.CTkFrame(self.header_frame, width=40, height=40, fg_color="#1E88E5", corner_radius=20)
        self.avatar_frame.pack(side="left", padx=15, pady=10)
        self.avatar_frame.pack_propagate(False)

        avatar_label = ctk.CTkLabel(
            self.avatar_frame,
            text="üëÅÔ∏è",
            font=ctk.CTkFont(size=20)
        )
        avatar_label.place(relx=0.5, rely=0.5, anchor="center")

        info_frame = ctk.CTkFrame(self.header_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="both", expand=True, padx=(5, 0), pady=10)

        self.bot_name = ctk.CTkLabel(
            info_frame,
            text="ChatBot",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="white"
        )
        self.bot_name.pack(anchor="w")

        self.bot_status = ctk.CTkLabel(
            info_frame,
            text="–≤ —Å–µ—Ç–∏",
            font=ctk.CTkFont(size=12),
            text_color="white"
        )
        self.bot_status.pack(anchor="w")

        self.main_frame = ctk.CTkFrame(self, fg_color="#FAFAFA")
        self.main_frame.pack(fill="both", expand=True)

        self.chat_frame = ctk.CTkFrame(self.main_frame, fg_color="white")
        self.chat_frame.pack(side="left", fill="both", expand=True, padx=(0, 1))

        self.messages_frame = ctk.CTkScrollableFrame(
            self.chat_frame,
            fg_color="white"
        )
        self.messages_frame.pack(fill="both", expand=True, padx=0, pady=0)

        self.suggestions_frame = ctk.CTkFrame(self.main_frame, width=250, fg_color="white")
        self.suggestions_frame.pack(side="right", fill="y")
        self.suggestions_frame.pack_propagate(False)

        suggestions_header = ctk.CTkFrame(self.suggestions_frame, height=50, fg_color="#E3F2FD", corner_radius=0)
        suggestions_header.pack(fill="x")
        suggestions_header.pack_propagate(False)

        self.suggestions_label = ctk.CTkLabel(
            suggestions_header,
            text="üí¨ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1976D2"
        )
        self.suggestions_label.pack(pady=15)

        self.suggestions_scroll = ctk.CTkScrollableFrame(
            self.suggestions_frame,
            fg_color="white"
        )
        self.suggestions_scroll.pack(fill="both", expand=True, padx=10, pady=10)

        self.input_frame = ctk.CTkFrame(self.chat_frame, height=70, fg_color="#F5F5F5", corner_radius=0)
        self.input_frame.pack(fill="x", side="bottom")
        self.input_frame.pack_propagate(False)

        input_container = ctk.CTkFrame(self.input_frame, fg_color="transparent")
        input_container.pack(fill="both", expand=True, padx=10, pady=10)

        self.attach_button = ctk.CTkButton(
            input_container,
            text="üìé",
            width=40,
            height=40,
            font=ctk.CTkFont(size=16),
            fg_color="transparent",
            hover_color="#E0E0E0",
            text_color="#757575"
        )
        self.attach_button.pack(side="left", padx=(0, 5))

        self.entry = ctk.CTkEntry(
            input_container,
            placeholder_text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            height=40,
            font=ctk.CTkFont(size=14),
            corner_radius=20,
            border_width=1,
            border_color="#E0E0E0"
        )
        self.entry.pack(side="left", fill="x", expand=True, padx=5)
        self.entry.bind("<Return>", self.send_message)

        self.send_button = ctk.CTkButton(
            input_container,
            text="‚û§",
            width=40,
            height=40,
            font=ctk.CTkFont(size=16),
            corner_radius=20,
            fg_color="#2AABEE",
            hover_color="#1E88E5",
            command=self.send_message
        )
        self.send_button.pack(side="right", padx=(5, 0))

        self.message_widgets = []
        self.suggestion_buttons = []
        self.update_suggestions()

        self.add_message("ChatBot", "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é! üòä", False)

    def update_suggestions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ Telegram"""
        for button in self.suggestion_buttons:
            button.destroy()
        self.suggestion_buttons = []

        selected_groups = random.sample(suggestions, min(4, len(suggestions)))
        current_suggestions = []

        for group in selected_groups:
            current_suggestions.extend(group)

        random.shuffle(current_suggestions)
        display_suggestions = current_suggestions[:12]

        for suggestion in display_suggestions:
            btn = ctk.CTkButton(
                self.suggestions_scroll,
                text=suggestion,
                height=35,
                font=ctk.CTkFont(size=12),
                corner_radius=18,
                fg_color="#E3F2FD",
                hover_color="#BBDEFB",
                text_color="#1976D2",
                border_width=1,
                border_color="#2196F3",
                command=lambda s=suggestion: self.use_suggestion(s)
            )
            btn.pack(fill="x", pady=3)
            self.suggestion_buttons.append(btn)

        separator = ctk.CTkFrame(self.suggestions_scroll, height=1, fg_color="#E0E0E0")
        separator.pack(fill="x", pady=10)

        refresh_btn = ctk.CTkButton(
            self.suggestions_scroll,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            corner_radius=20,
            fg_color="#4CAF50",
            hover_color="#45A049",
            command=self.update_suggestions
        )
        refresh_btn.pack(fill="x", pady=5)
        self.suggestion_buttons.append(refresh_btn)

    def use_suggestion(self, suggestion):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
        self.entry.delete(0, tk.END)
        self.entry.insert(0, suggestion)
        self.send_message()

    def find_pattern_response(self, message):
        """–ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
        for pattern, response_template in patterns:
            match = re.search(pattern, message.lower())
            if match:
                if '{}' in response_template:
                    return response_template.format(match.group(1))
                else:
                    return response_template
        return None

    def get_fuzzy_match(self, message):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        words = message.lower().split()
        for word in words:
            for key in responses.keys():
                if word in key or key in word:
                    return responses[key]
        return None

    def send_message(self, event=None):
        user_msg = self.entry.get().strip()
        if not user_msg:
            return

        self.entry.delete(0, tk.END)

        self.add_message("–í—ã", user_msg, True)

        bot_msg = None

        bot_msg = responses.get(user_msg.lower())

        if not bot_msg:
            bot_msg = self.find_pattern_response(user_msg)

        if not bot_msg:
            bot_msg = self.get_fuzzy_match(user_msg)

        # 4. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not bot_msg:
            default_responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ ü§î",
                "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ",
                "–•–º, —ç—Ç–æ –Ω–æ–≤–æ–µ –¥–ª—è –º–µ–Ω—è üßê",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å? ü§ñ"
            ]
            bot_msg = random.choice(default_responses)

        self.after(500, lambda: self.add_message("ChatBot", bot_msg, False))

        if random.randint(1, 5) == 1:
            self.update_suggestions()

    def add_message(self, sender, text, is_user=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Telegram"""
        timestamp = datetime.now().strftime("%H:%M")

        message_widget = TelegramMessage(
            self.messages_frame,
            sender,
            text,
            timestamp,
            is_user
        )
        message_widget.pack(fill="x", pady=2)
        self.message_widgets.append(message_widget)

        self.after(100, lambda: self.messages_frame._parent_canvas.yview_moveto(1.0))


if __name__ == "__main__":
    app = ChatBotApp()
    app.mainloop()